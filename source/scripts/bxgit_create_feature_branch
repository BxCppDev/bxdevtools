#!/usr/bin/env bash
# -*- mode: shell-script; -*-

which bxdevtools-config > /dev/null 2>&1
if [ $? -ne 0 ]; then
    echo >&2 "[error] Cannot found BxDevTools setup! Abort!"
    exit 1
fi

. $(bxdevtools-config --moduledir)/_bxdev_utils.bash
. $(bxdevtools-config --moduledir)/_bxdev_app.bash
. $(bxdevtools-config --moduledir)/_bxdev_message.bash
. $(bxdevtools-config --moduledir)/_bxdev_git.bash

function app_usage()
{
    cat <<EOF
Usage: bxgit_create_feature_branch [OPTION...] BRANCHNAME [FROM]

Known values for OPTION are:

 --help	  	  Display this help and exit.
 --dry-run  	  Do not perform any Git actions, only tests.
 --debug	  Activate debug mode.
 --topic NAME     The topic of the new feature branch.
 --issue NUMBER   Set the issue number the new feature branch.is associated
                  with. The issue should not refered to a bug or a defect.
 --remote         The new feature branch is associated with an
                  upstream remote origin.(public feature branch)

EOF
    return 0
}

debug=false
dry_run=false
from="develop"
topic=""
remote=false
feature_branch=""
feature_branch_label=""

while [ -n "$1" ]; do
    optarg="$1"
    if [ "x${optarg:0:1}" = "x-" ]; then
	option="${optarg}"
	if [ "${optarg}" = "--help" ]; then
	    app_usage
	    bxdev_app_exit 0
	elif [ "${optarg}" = "--debug" ]; then
	    debug=true
	elif [ "${optarg}" = "--dry-run" ]; then
	    dry_run=true
	elif [ "${optarg}" = "--topic" -o "${optarg}" = "-t"  ]; then
	    shift 1
	    topic="$1"
	elif [ "${optarg}" = "--issue" -o "${optarg}" = "-i"  ]; then
	    shift 1
	    issue_number="$1"
	    bxdev_utils_check_integer ${issue_number}
	    if [ $? -ne ${BXDEV_UTILS_TRUE} ]; then
		bxdev_app_exit ${BXDEV_UTILS_FAILURE} "Not a valid issue number! Abort!"
	    fi
	    topic="issue-${issue_number}"
	elif [ "${optarg}" = "--remote" ]; then
	    remote=true
	else
	    bxdev_app_exit 1 "Unsupported option '${option}'!"
	fi
    else
	argument="${optarg}"
	if [ -z "${feature_branch_label}" ]; then
	    bxdev_message_trace "Parsing feature branch label..."
	    feature_branch_label="${argument}"
	else
	    bxdev_app_exit 1 "Unsupported argument '${argument}'!"
	fi
    fi
    shift 1
done

bxdev_message_info "Feature branch label = '${feature_branch_label}'"

if [ -n "${feature_branch_label}" ]; then
    bxdev_message_info "Checking feature branch label..."
    fb="${feature_branch_label}"
    if [ "x${fb:0:9}" != "x_feature-" -a "x${fb:0:8}" != "xfeature-" ]; then
	feature_branch="feature-${fb}"
	if [ ${remote} == false ]; then
	    feature_branch="_feature-${fb}"
	fi
	topic="${fb}"
	bxdev_message_info "resolved feature branch = '${feature_branch}'"
	bxdev_message_info "resolved topic = '${topic}'"
    else
	feature_branch=${feature_branch_label}
    fi
fi
if [ -z "${feature_branch}" ]; then
    if [ -z "${topic}" ]; then
	app_usage
	bxdev_app_exit 1 "Missing feature branch topic!"
    else
	feature_branch="_feature-${topic}"
	if [ ${remote} == true ]; then
	    feature_branch="feature-${topic}"
	fi
    fi
fi
bxdev_message_info "Feature branch name = '${feature_branch}'"

if [ ${debug} = true ]; then
    bxdev_message_debug "topic          = '${topic}'"
    bxdev_message_debug "remote         = '${remote}'"
    bxdev_message_debug "feature_branch = '${feature_branch}'"
    bxdev_message_debug "from branch    = '${from}'"
fi

bxdev_git_check_repository
if [ $? -ne 0 ]; then
    bxdev_app_exit 1 "Not a base Git repository!"
else
    bxdev_message_info "Found a base Git repository."
fi

bxdev_git_local_branch_exists "${from}"
if [ $? -ne 0 ]; then
    bxdev_app_exit 1 "No '${from}' branch exists in this Git repository!"
else
    bxdev_message_info "Found a local '${from}' branch."
fi

bxdev_git_remote_branch_exists "${from}"
if [ $? -ne 0 ]; then
    bxdev_app_exit 1 "No remote/origin '${from}' branch is associated to this Git repository!"
else
    bxdev_message_info "Found a remote/origin '${from}' branch."
fi

bxdev_git_local_branch_exists "${feature_branch}"
if [ $? -eq 0 ]; then
    bxdev_app_exit 1 "A local '${feature_branch}' feature branch already exists in this Git repository!"
fi

bxdev_git_remote_branch_exists "${feature_branch}"
if [ $? -eq 0 ]; then
    bxdev_app_exit 1 "A remote '${feature_branch}' feature branch already exists!"
fi

if [ ${dry_run} == true ]; then
    echo >&2 "DEVEL: dry run stops the script here."
    bxdev_app_exit 0
fi

git checkout -b ${feature_branch} ${from}
if [ $? -ne 0 ]; then
    bxdev_app_exit 1 "Could not create the new feature branch '${feature_branch}'!"
fi
bxdev_message_info "Feature branch name = ${feature_branch}'"

if [ ${remote} == true ]; then
    git push --set-upstream origin ${feature_branch}
    if [ $? -ne 0 ]; then
	bxdev_app_exit 1 "Could not push the new local '${feature_branch}' feature branch on 'origin/${feature_branch}'!"
    fi
fi

bxdev_app_exit 0

# end
