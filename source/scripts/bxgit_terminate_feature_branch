#!/usr/bin/env bash
# -*- mode: shell-script; -*-

which bxdevtools-config > /dev/null 2>&1
if [ $? -ne 0 ]; then
    echo >&2 "[error] Cannot found BxDevTools setup! Abort!"
    exit 1
fi

. $(bxdevtools-config --moduledir)/_bxdev_app.bash
. $(bxdevtools-config --moduledir)/_bxdev_message.bash
. $(bxdevtools-config --moduledir)/_bxdev_git.bash

function app_usage()
{
    cat <<EOF
Usage: bxgit_terminate_feature_branch [OPTION...] BRANCH_NAME

Known values for OPTION are:

 --help		Display this help and exit.
 --dry-run      Do not perform any Git actions, only tests.
 --debug	Activate debug mode.

EOF
    return 0
}

debug=false
dry_run=false
to_branch="develop"
topic=""
remote=false
feature_branch=""
feature_branch_label=""

while [ -n "$1" ]; do
    optarg="$1"
    if [ "x${optarg:0:1}" = "x-" ]; then
	option="${optarg}"
	if [ "${optarg}" = "--help" ]; then
	    app_usage
	    bxdev_app_exit 0
	elif [ "${optarg}" = "--debug" ]; then
	    debug=true
	elif [ "${optarg}" = "--dry-run" ]; then
	    dry_run=true
	elif [ "${optarg}" = "--branch" -o "${optarg}" = "-b" ]; then
	    shift 1
	    feature_branch="$1"
	else
	    bxdev_app_exit 1 "Unsupported option '${option}'!"
	fi
    else
	argument="${optarg}"
	if [ -z "${feature_branch_label}" ]; then
	    bxdev_message_trace "Parsing feature branch label..."
	    feature_branch_label="${argument}"
	else
	    bxdev_app_exit 1 "Unsupported argument '${argument}'!"
	fi
    fi
    shift 1
done

bxdev_message_info "Feature branch label = '${feature_branch_label}'"

if [ -n "${feature_branch_label}" ]; then
    bxdev_message_info "Checking feature branch label..."
    fb="${feature_branch_label}"
    if [ "x${fb:0:9}" != "x_feature-" -a "x${fb:0:8}" != "xfeature-" ]; then
	feature_branch="feature-${fb}"
	if [ ${remote} == false ]; then
	    feature_branch="_feature-${fb}"
	fi
	topic="${fb}"
	bxdev_message_info "resolved feature branch = '${feature_branch}'"
	bxdev_message_info "resolved topic = '${topic}'"
    else
	feature_branch=${feature_branch_label}
    fi
fi

bxdev_git_check_repository
if [ $? -ne 0 ]; then
    bxdev_app_exit 1 "Not a base Git repository!"
else
    bxdev_message_info "Found a base Git repository."
fi

if [ -z "${feature_branch}" ]; then
    current_branch=$(bxdev_git_current_branch_name)
    bxdev_git_check_feature_branch_name "${current_branch}"
    if [ $? -ne 0 ]; then
	bxdev_app_exit 1 "Current branch name is not a feature branch!"
    fi
    feature_branch="${current_branch}"
fi

bxdev_message_info "Feature branch name = '${feature_branch}'"

if [ -z "${topic}" ]; then
    if [ "x${feature_branch:0:9}" = "x_feature-" ]; then
	remote=true
	topic="${feature_branch:9}"
    elif [ "x${feature_branch:0:8}" = "xfeature-" ]; then
	remote=false
	topic="${feature_branch:8}"
    fi
fi

if [ ${debug} = true ]; then
    bxdev_message_debug "topic          = '${topic}'"
    bxdev_message_debug "remote         = ${remote}"
    bxdev_message_debug "feature_branch = '${feature_branch}'"
    bxdev_message_debug "from branch    = '${from}'"
fi

bxdev_git_local_branch_exists "${feature_branch}"
if [ $? -ne 0 ]; then
    bxdev_app_exit 1 "No local '${feature_branch}' feature branch exists in this Git repository!"
else
    bxdev_message_info "Found a local '${feature_branch}' feature branch."
fi

bxdev_git_local_branch_exists "${to_branch}"
if [ $? -ne 0 ]; then
    bxdev_app_exit 1 "No '${to_branch}' branch exists in this Git repository!"
else
    bxdev_message_info "Found a local '${to_branch}' branch."
fi

cbn=$(bxdev_git_current_branch_name)
bxdev_message_info "Current branch name: '${cbn}'"
if [ "${cbn}" != "${feature_branch}" ]; then
    bxdev_app_exit 1 "The '${feature_branch}' branch is not the active one!"
fi

# test -d /tmp/${USER} || mkdir -p /tmp/${USER}
# bxgstmp=$(mktemp -p /tmp/${USER} bxgit_terminate_feature_branch.XXXXXXX)
# git status --porcelain > ${bxgstmp}
# grep "^M." ${bxgstmp}
# if [ $? -ne 0 ]; then
#     bxdev_app_exit 1 "Some files have been modified and not commited!"
# fi
# grep "^.M" ${bxgstmp}
# if [ $? -ne 0 ]; then
#     bxdev_app_exit 1 "Some files have been modified and not updated!"
# fi

if [ ${dry_run} == true ]; then
    echo >&2 "DEVEL: dry run stops the script here."
    bxdev_app_exit 0
fi
bxdev_app_exit 0

git checkout ${to_branch}
if [ $? -ne 0 ]; then
    bxdev_app_exit 1 "Could not switch to local '${to_branch}' branch!"
fi

if [ ${pull} = true ]; then
    bxdev_message_info "Pulling from 'origin/${to_branch}' branch to local '${to_branch}' branch ..."
    git pull ${to_branch}
    if [ $? -ne 0 ]; then
	bxdev_app_exit 1 "Could not pull from 'origin/${to_branch}' branch to local '${to_branch}' branch!"
    fi
fi

bxdev_message_info "Merging '${feature_branch}' feature branch into '${to_branch}' branch..."
git merge -m "Merge feature branch '${feature_branch}' into branch '${to_branch}'" --no-ff ${feature_branch}
if [ $? -ne 0 ]; then
    bxdev_app_exit 1 "Could not merge local '${feature_branch}' feature branch into '${to_branch}' branch!"
fi

bxdev_message_info "Deleting local '${feature_branch}' feature branch..."
git branch -d ${feature_branch}
if [ $? -ne 0 ]; then
    bxdev_app_exit 1 "Could not delete local '${feature_branch}' feature branch!"
fi

bxdev_message_info "Pushing modifications from local '${to_branch}' branch to 'origin/${to_branch}' branch..."
git push origin ${to_branch}
if [ $? -ne 0 ]; then
    bxdev_app_exit 1 "Could not push modifications from local '${to_branch}' branch to 'origin/${to_branch}' branch!"
fi

bxdev_app_exit 0

# end
